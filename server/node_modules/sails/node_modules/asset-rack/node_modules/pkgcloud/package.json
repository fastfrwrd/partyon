{
  "name": "pkgcloud",
  "description": "An infrastructure-as-a-service agnostic cloud library for node.js",
  "version": "0.6.6",
  "author": {
    "name": "Nodejitsu Inc"
  },
  "contributors": [
    {
      "name": "Charlie Robbins",
      "email": "charlie@nodejitsu.com"
    },
    {
      "name": "Nuno Job",
      "email": "nuno@nodejitsu.com"
    },
    {
      "name": "Daniel Aristizabal",
      "email": "daniel@nodejitsu.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/nodejitsu/pkgcloud.git"
  },
  "keywords": [
    "cloud",
    "cloud computing",
    "api",
    "rackspace",
    "joyent",
    "aws",
    "amazon",
    "azure",
    "iaas",
    "servers",
    "compute",
    "storage",
    "databases",
    "client",
    "mongolab",
    "iriscouch",
    "mongohq",
    "openstack",
    "redistogo"
  ],
  "dependencies": {
    "async": "0.1.x",
    "errs": "0.2.x",
    "eventemitter2": "0.4.x",
    "filed": "0.0.7",
    "xml2js": "0.1.x",
    "mime": "1.2.x",
    "morestreams": "0.1.x",
    "pkginfo": "0.2.x",
    "request": "2.x.x",
    "underscore": "1.4.x",
    "utile": "0.x.x"
  },
  "devDependencies": {
    "vows": "0.7.x",
    "nock": "0.13.x"
  },
  "main": "./lib/pkgcloud",
  "scripts": {
    "test": "node ./test/test.js"
  },
  "engines": {
    "node": "0.6.x || 0.8.x"
  },
  "readme": "# pkgcloud \n\npkgcloud is a standard library for node.js that abstracts away differences among multiple cloud providers.\n\n* [Getting started](#getting-started)\n  * [Basic APIs](#basic-apis)\n  * [Unified Vocabulary](#unified-vocabulary)\n  * [Supported APIs](#supported-apis)\n* [Compute](#compute)\n* [Storage](#storage)\n  * [Uploading Files](#uploading)\n  * [Downloading Files](#downloading)\n* [Database](#database)\n* _Fine Print_\n  * [Installation](#installation)\n  * [Tests](#tests)\n  * [Contribute!](#contributing)\n  * [Roadmap](#roadmap)\n\n<a name=\"getting-started\"></a>\n## Getting Started\n\nCurrently there are three service types which are handled by pkgcloud:\n\n* [Compute](#compute)\n* [Storage](#storage)\n* [Database](#database)\n\nIn our [Roadmap](#roadmap), we plan to add support for DNS and CDN services, but _these are not currently available._ \n\n<a name=\"basic-apis\"></a>\n### Basic APIs for pkgcloud\n\nServices provided by `pkgcloud` are exposed in two ways:\n\n* **By service type:** For example, if you wanted to create an API client to communicate with a compute service you could simply:\n\n``` js \n  var client = require('pkgcloud').compute.createClient({\n    //\n    // The name of the provider (e.g. \"joyent\")\n    //\n    provider: 'provider-name',\n    \n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\n* **By provider name:** For example, if you knew the name of the provider you wished to communicate with you could do so directly:\n\n``` js\n  var client = require('pkgcloud').providers.joyent.compute.createClient({\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\nAll API clients exposed by `pkgcloud` can be instantiated through `pkgcloud[serviceType].createClient({ ... })` or `pkcloud.providers[provider][serviceType].createClient({ ... })`.\n\n<a name=\"unified-vocabulary\"></a>\n### Unified Vocabulary\n\nDue to the differences between the vocabulary for each service provider, **[pkgcloud uses its own unified vocabulary](https://github.com/nodejitsu/pkgcloud/blob/master/docs/vocabulary.md).** \n\n* **Compute:** [Server](#server), [Image](#image), [Flavor](#flavor)\n* **Storage:** [Container](#container), [File](#file)\n\n<a name=\"supported-apis\"></a>\n### Supported APIs\n\nSupporting every API for every cloud service provider in Node.js is a huge undertaking, but _that is the long-term goal of `pkgcloud`_. **Special attention has been made to ensure that each service type has enough providers for a critical mass of portability between providers** (i.e. Each service implemented has multiple providers).\n\n* **[Compute](#compute)**\n  * [Joyent](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/joyent.md#using-compute)\n  * [Azure](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/azure.md#using-compute)\n  * [Rackspace](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/rackspace.md#using-compute)\n  * [Amazon](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/amazon.md#using-compute)\n* **[Storage](#storage)**\n  * [Azure](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/azure.md#using-storage)\n  * [Rackspace](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/rackspace.md#using-storage)\n  * [Amazon](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/amazon.md#using-storage)\n* **[Database](#database)**\n  * [IrisCouch](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/iriscouch.md)\n  * [MongoLab](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/mongolab.md)\n  * [Rackspace](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/rackspace.md#database)\n  * [MongoHQ](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/mongohq.md)\n  * [RedisToGo](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/redistogo.md)\n  \n<a name=\"compute\"></a>\n## Compute\n\nThe `pkgcloud.compute` service is designed to make it easy to provision and work with VMs. To get started with a `pkgcloud.compute` client just create one:\n\n``` js\n  var client = require('pkgcloud').compute.createClient({\n    //\n    // The name of the provider (e.g. \"joyent\")\n    //\n    provider: 'provider-name',\n  \n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\nEach compute provider takes different credentials to authenticate; these details about each specific provider can be found below:\n\n* [Joyent](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/joyent.md#using-compute)\n* [Azure](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/azure.md#using-compute)\n* [Rackspace](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/rackspace.md#using-compute)\n* [Amazon](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/amazon.md#using-compute)\n\nEach instance of `pkgcloud.compute.Client` returned from `pkgcloud.compute.createClient` has a set of uniform APIs:\n\n<a name=\"server\"></a>\n### Server\n* `client.getServers(function (err, servers) { })`\n* `client.createServer(options, function (err, server) { })`\n* `client.destroyServer(serverId, function (err, server) { })`\n* `client.getServer(serverId, function (err, server) { })`\n* `client.rebootServer(server, function (err, server) { })`\n\n<a name=\"image\"></a>\n### Image\n* `client.getImages(function (err, images) { })`\n* `client.getImage(imageId, function (err, image) { })`\n* `client.destroyImage(image, function (err, ok) { })`\n* `client.createImage(options, function (err, image) { })`\n\n<a name=\"flavor\"></a>\n### Flavor\n* `client.getFlavors(function (err, flavors) { })`\n* `client.getFlavor(flavorId, function (err, flavor) { })`\n\n<a name=\"storage\"></a>\n## Storage\n\nThe `pkgcloud.storage` service is designed to make it easy to upload and download files to various infrastructure providers. **_Special attention has been paid so that methods are streams and pipe-capable._**\n\nTo get started with a `pkgcloud.storage` client just create one:\n\n``` js\n  var client = require('pkgcloud').storage.createClient({\n    //\n    // The name of the provider (e.g. \"joyent\")\n    //\n    provider: 'provider-name',\n  \n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\nEach compute provider takes different credentials to authenticate; these details about each specific provider can be found below:\n\n* [Azure](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/azure.md#using-storage)\n* [Rackspace](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/rackspace.md#using-storage)\n* [Amazon](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/amazon.md#using-storage)\n\nEach instance of `pkgcloud.storage.Client` returned from `pkgcloud.storage.createClient` has a set of uniform APIs:\n\n<a name=\"container\"></a>\n### Container\n* `client.getContainers(function (err, containers) { })`\n* `client.createContainer(options, function (err, container) { })`\n* `client.destroyContainer(containerName, function (err) { })`\n* `client.getContainer(containerName, function (err, container) { })`\n\n<a name=\"file\"></a>\n### File\n* `client.upload(options, function (err) { })`\n* `client.download(options, function (err) { })`\n* `client.getFiles(container, function (err, files) { })`\n* `client.getFile(container, file, function (err, server) { })`\n* `client.removeFile(container, file, function (err) { })`\n\nBoth the `.upload(options)` and `.download(options)` have had **careful attention paid to make sure they are pipe and stream capable:**\n\n### Upload a File\n``` js\n  var pkgcloud = require('pkgcloud'),\n      fs = require('fs');\n  \n  var client = pkgcloud.storage.createClient({ /* ... */ });\n  \n  fs.createReadStream('a-file.txt').pipe(client.upload({\n    container: 'a-container',\n    remote: 'remote-file-name.txt'\n  }));\n```\n\n### Download a File\n``` js\n  var pkgcloud = require('pkgcloud'),\n      fs = require('fs');\n  \n  var client = pkgcloud.storage.createClient({ /* ... */ });\n  \n  client.download({\n    container: 'a-container',\n    remote: 'remote-file-name.txt'\n  }).pipe(fs.createWriteStream('a-file.txt'));\n```\n\n<a name=\"database\"></a>\n## Databases\n\nThe `pkgcloud.database` service is designed to consistently work with a variety of Database-as-a-Service (DBaaS) providers. \n\nTo get started with a `pkgcloud.storage` client just create one:\n\n``` js\n  var client = require('pkgcloud').database.createClient({\n    //\n    // The name of the provider (e.g. \"joyent\")\n    //\n    provider: 'provider-name',\n  \n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\nEach database provider takes different credentials to authenticate; these details about each specific provider can be found below:\n\n* **CouchDB**\n  * [IrisCouch](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/iriscouch.md#couchdb)\n* **MongoDB**\n  * [MongoLab](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/mongolab.md)\n  * [MongoHQ](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/mongohq.md)\n* **Redis**\n  * [IrisCouch](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/iriscouch.md#redis)\n  * [RedisToGo](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/redistogo.md)\n* **MySQL**\n  * [Rackspace](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/rackspace.md#database)\n* **Azure Tables**\n  * [Azure](https://github.com/nodejitsu/pkgcloud/blob/master/docs/providers/azure.md#database)\n\nDue to the various differences in how these DBaaS providers provision databases only a small surface area of the API for instances of `pkgcloud.database.Client` returned from `pkgcloud.database.createClient` is consistent across all providers:\n\n* `client.create(options, callback)`\n\nAll of the individual methods are documented for each DBaaS provider listed above.\n\n<a name=\"installation\"></a>\n## Installation\n\n``` bash\n  $ npm install pkgcloud\n```\n\n<a name=\"tests\"></a>\n## Tests\nFor run the tests you will need `vows@0.7.0` or higher, please install it and then run:\n\n``` bash\n $ npm test\n```\n\nThe tests use the [`nock`](https://github.com/flatiron/nock) library for mock up the response of providers, so the tests run without do any connection to the providers, there is a notorius advantage of speed on that, also you can run the tests without Internet connection and also can highlight a change of API just disabling `nock`.\n\n\n### Running tests without mocks\nBy default the `npm test` command run the tests enabling `nock`. And sometimes you will want to test against the live provider, so you need to do this steps, in order to test without mocks.\n\n1. Copy a provider config file from `test/configs/mock` to `test/configs`\n2. Fill in with your own credentials for the provider.\n3. (Optional) The compute test suite run the common tests for all providers listed on `test/configs/providers.json`, there you can enable or disable providers.\n4. Run the tests using vows.\n\n``` bash\nVows installed globally\n $ vows --spec --isolate test/*/*/*-test.js\n\nLinux/Mac - Vows installed locally\n $ ./node_modules/.bin/vows --spec --isolate test/*/*/*-test.js\t\t\n\nWindows - Vows installed locally:\n $ node_modules\\.bin\\vows.cmd --spec --isolate test/*/*/*-test.js\t\n\n```\n\n### Other ways to run the tests\nAlso you can run the tests directly using `vows` with `nock` enabled:\n\n``` bash\nLinux/Mac - Vows installed globally:\n $ NOCK=on vows --spec --isolate test/*/*/*-test.js\t\n \nLinux/Mac - Vows installed locally:\n $ NOCK=on ./node_modules/.bin/vows.cmd --spec --isolate test/*/*/*-test.js\t\t\n\nWindows - Vows installed globally:\n $ set NOCK=on&vows --spec --isolate test/*/*/*-test.js\t\n \nWindows - Vows installed locally:\n $ set NOCK=on&node_modules\\.bin\\vows.cmd --spec --isolate test/*/*/*-test.js\t\n```\n\nEven better, you can run the tests for some specific provider:\n\n``` bash\nLinux/Mac - Vows installed globally:\n $ NOCK=on vows --spec --isolate test/iriscouch/*/*-test.js\n\nLinux/Mac - Vows installed locally:\n $ NOCK=on ./node_modules/.bin/vows --spec --isolate test/iriscouch/*/*-test.js\n\nWindows - Vows installed globally:\n $ set NOCK=on&vows --spec --isolate test/iriscouch/*/*-test.js\n \nWindows - Vows installed locally:\n $ set NOCK=on&node_modules\\.bin\\vows.cmd --spec --isolate test/iriscouch/*/*-test.js\n\n```\n\n\n\n<a name=\"contributing\"></a>\n## Contribute!\nWe welcome contribution to `pkgcloud` by any and all individuals or organizations. Before contributing please take a look at the [Contribution Guidelines in CONTRIBUTING.md](https://github.com/nodejitsu/pkgcloud/blob/master/CONTRIBUTING.md).\n\nWe are pretty flexible about these guidelines, but the closer you follow them the more likely we are to merge your pull-request.\n\n<a name=\"roadmap\"></a>\n## Roadmap\n\n1. Backport latest fixes from `node-cloudfiles` and `node-cloudservers`\n2. Include `CDN` and `DNS` services.\n3. Implement `fs` compatible file API.\n4. Support additional service providers.\n\n#### Author: [Nodejitsu Inc.](http://nodejitsu.com)\n#### Contributors: [Charlie Robbins](https://github.com/indexzero), [Nuno Job](https://github.com/dscape), [Daniel Aristizabal](https://github.com/cronopio), [Marak Squires](https://github.com/marak), [Dale Stammen](https://github.com/stammen)\n#### License: MIT",
  "readmeFilename": "README.md",
  "_id": "pkgcloud@0.6.6",
  "_from": "pkgcloud@0.6.6"
}
