{
  "name": "sails",
  "author": {
    "name": "Mike McNeil",
    "email": "mike@balderdash.co"
  },
  "contributors": [
    {
      "name": "Mike McNeil",
      "email": "mike@balderdash.co",
      "url": "http://michaelmcneil.com"
    },
    {
      "name": "virpool"
    },
    {
      "name": "Dennis Bartlett",
      "email": "dcbartlett@gmail.com"
    },
    {
      "name": "themouette"
    },
    {
      "name": "valinorsgatekeeper"
    },
    {
      "name": "Brad Carleton",
      "email": "brad@techpines.com",
      "url": "http://techpines.com"
    },
    {
      "name": "Gabe Hernandez",
      "email": "gabe@balderdash.co"
    },
    {
      "name": "Curtis Lacy",
      "email": "curtis.lacy@ldengine.com"
    }
  ],
  "version": "0.8.89-1",
  "description": "API-driven framework for building realtime apps, using MVC conventions (based on Express and Socket.io)",
  "homepage": "http://sailsjs.com",
  "keywords": [
    "mvc",
    "web-framework",
    "rails",
    "ruby-on-rails",
    "express",
    "sails",
    "sailsjs",
    "sails.js",
    "REST",
    "API",
    "orm",
    "mysql",
    "active-record",
    "socket.io"
  ],
  "main": "./lib/sails",
  "bin": {
    "sails": "./bin/sails.js"
  },
  "scripts": {
    "test": "node test/start.js"
  },
  "directories": {
    "lib": "lib"
  },
  "dependencies": {
    "sails-dirty": "0.7.2",
    "express": "2.5.11",
    "socket.io": "0.9.6",
    "ejs": "0.7.2",
    "connect": "1.8.3",
    "async": "0.1.22",
    "underscore": "1.4.2",
    "less": "1.3.0",
    "optimist": "0.3.4",
    "underscore.string": "2.3.0",
    "glob": "3.1.14",
    "winston": "0.6.2",
    "fs-extra": "0.5.0",
    "i18n": "0.3.5",
    "wrench": "1.4.4",
    "uglify-js": "2.2.4",
    "asset-rack": "2.0.6",
    "node-uuid": "~1.4.0",
    "parley": "0.0.2",
    "include-all": "0.0.5",
    "forever": "~0.10.0",
    "clean-css": "0.10.1",
    "fs-watch-tree": "~0.2.2",
    "jade": "0.28.0"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "coffee-script": "*",
    "request": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/balderdashy/sails.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://sails.mit-license.org/"
    }
  ],
  "bugs": {
    "url": "http://github.com/balderdashy/sails/issues"
  },
  "engines": {
    "node": ">= 0.8.1"
  },
  "readme": "![image_devInTub@2x.png](http://i.imgur.com/Tj9Nk.png) \n\n# Sails.js\nSails.js makes it easy to build custom, enterprise-grade Node.js apps. It is designed to resemble the MVC architecture from frameworks like Ruby on Rails, but with support for the more modern, data-oriented style of web app development.  It's especially good for building realtime features like chat.\n\n# Intro to Sails.js\n[![ScreenShot](http://balderdashy.github.com/sails/images/screenshot.png)](http://youtu.be/GK-tFvpIR7c)\n\n\n# Installation\n\nTo install the latest stable release with the command-line tool:\n```sh\nsudo npm -g install sails\n```\n\n\n# Creating a New Sails Project\n\nCreate a new app\n```sh\n# Create the app\nsails new testProject\n```\n\nLift Sails\n```sh\n# cd into the new folder\ncd testProject\n\n# Fire up the server  \nsails lift\n```\n\nThe default port for Sails is 1337.  At this point if you visit <a href=\"http://localhost:1337/\">http://localhost:1337/</a> You will see the default home page.  \n\nNow, let's get Sails to do cool stuff.\n\n# Hello, Sails!\n\nTo get Sails to say \"Hello World!\", you need only to change the view for the default home page in `views/home/index.ejs`.  But that doesn't really teach us a whole lot-- instead, let's create a new controller and have IT tell us hello.\n\n```sh\nsails generate controller hello index\n```\n\nThis will generate a file called `HelloController.js` in your app's `api/controllers` directory with one action, `index()`.\n\nNow let's edit that action to send back the string `'Hello World!'`.\n\n```javascript\n\nvar HelloController = {\n\n\tindex: function(req, res) {\n\t\tres.send('Hello World!');\n\t}\n}\n\nmodule.exports = HelloController;\n```\n\n\nLet's say we want the application to display this hello response when a request comes in for `http://localhost:1337/hi`. \nGo into the **/config/routes.js** file. Here you can manually define these mappings as you like. Change the file to look like this.\n\n```javascript\nvar routes = {\n\t'/hi': {\n\t\tcontroller: 'hello',\n\t\taction: 'index'\n\t}\n}\n\nmodule.exports = routes;\n```\n\nFinally, restart the server by going to your node terminal and pressing control+c. Then enter the\nfollowing.\n\n```sh\nsails lift\n```\n\nNow when you visit <a href=\"http://localhost:1337/\">http://localhost:1337/hi</a> your browser will say **'Hello World!'**.\n\n> ### Notes:\n> We could have omitted `action: 'index'`, since it's the default, but I left it in for clarity.\n\n> As you will see when working more with Sails.js, one great feature is that by default, you do not **have**\nto define routes for controller actions. Sails.js will do its best to understand what you're talking about.  \nFor instance, if you were to visit http://localhost:1337/hello, you'd notice that it routes you to the index action of `HelloController`.\n\n> Finally, if you were to omit HelloController altogether, but included a view in `views/hello/index.ejs`, Sails.js will serve that view when you visit `/hello`.\n\n> You can learn more about that on the <a href=\"https://github.com/balderdashy/sails/wiki/Routing\">Routing</a> section of this wiki.\n\n\n# Creating a Model\nCreating a model is very easy with the command line tool. You can even define attributes and their\ntype by adding arguments at the end of the command. To generate a User model, enter the following:\n```\nsails generate model User\n```\nIf you check out your app, you'll notice that this created a file at **/api/model/User.js**.\n\n<!--\n  Let's give her a name-- try uncommenting the name attribute so it looks more or less like this:\n\n```javascript\nvar User = {\n        attributes      : {\n                name: 'STRING'\n        }\n\n};\nmodule.exports = User;\n```\n-->\n\n# What's Better Than Scaffolding?  How About a free JSON API?\n\nSails API scaffolding is nothing like Rails scaffolding. HTML scaffolds just don't make sense for \nmodern web apps! Instead, Sails automatically builds a RESTful JSON API for your models. Best of\nall, it supports HTTP _and_ WebSockets! By default for every controller you create, you get the\nbasic CRUD operations created automatically.\n\nFor instance, after generating the User model above, if you visit `http://localhost:1337/user/create`, you'll see:\n```json\n{\n  \"createdAt\": \"2013-01-10T01:33:19.105Z\",\n  \"updatedAt\": \"2013-01-10T01:33:19.105Z\",\n  \"id\": 1\n}\n```\n\nThat's it!  You just created a model in the database!  You can also `find`, `update`, and `destroy` users:\n\n```\n# List of all users\nhttp://localhost:1337/user\n\n# Find the user with id 1\nhttp://localhost:1337/user/1\n\n# Create a new user\nhttp://localhost:1337/user/create?name=Fisslewick\n(or send an HTTP POST to http://localhost:1337/user)\n\n# Update the name of the user with id 1\nhttp://localhost:1337/user/update/1?name=Gordo\n(or send an HTTP PUT to http://localhost:1337/user/1)\n\n# Destroy the user with id 1\nhttp://localhost:1337/user/destroy/1\n(or send an HTTP DELETE to http://localhost:1337/user/1)\n```\n\n\n## Additional Features\nSails does a few things other Node.js MVC frameworks can't do:\n- Automatically generated JSON API for manipulating models means you don't have to write any backend code to build simple database apps\n- Built-in authentication, role-based access control, and customizable policies assignable at the controller/action level\n- Transport agnostic routing: Sails controllers also handle Socket.io / WebSocket messages!  This makes it much easier to send the server-originated or 'comet' notifications you need for features like chat, realtime analytics, and multiplayer games.\n- Automatic asset minification: Your UI code is automatically included in development mode, and minified into a simple, gzipped file in production.  Also supports LESS and CoffeeScript.\n\n\nTo learn more, check out the documentation here: \nhttps://github.com/balderdashy/sails/wiki/_pages\n\n\n\nDependencies and Compatibility\n--\n\nTested with node 0.8.1\nSails is built on the rock-solid foundations of ExpressJS and Socket.io.  \n\n\n\n\n\n\n<!--\n![icon_circlechart@2x.png](http://i.imgur.com/hXc06.png) \n\nDemo\n--\n\n*Try it in two browser windows*\n\nhttp://sailsjs.com:1337/experiment#subcomponents\n\n\n#### Code\nhttps://github.com/balderdashy/sails-example\n-->\n\n\n\n\n\n\n\n\n\n\n![icon_circleheart@2x.png](http://i.imgur.com/liHPV.png) \n## Who Built This?\n\nThe Sails framework was developed by Mike McNeil (@mikermcneil) and is maintained by Balderdash (@balderdashy), a realtime web & mobile studio I started with Heather White (@hdesignsit) in Austin, TX.\n\nAfter building a few realtime javascript apps and taking them into production, we realized that the  JavaScript development landscape is very much still the Wild West.  Over time, after trying lots of different methodologies (on the front end and the back), we decided to crystallize all of our best practices into this framework.  I hope it saves you some time :)\n\n\n\n\n\n\n\n![icon_circlelightbulb@2x.png](http://i.imgur.com/eOFXn.png)  \n\nLicense\n--\n\nSails is built around so many great open-source technologies that it would never have crossed our minds to keep it proprietary.  We owe huge gratitude and props to TJ Holowaychuk (@visionmedia) and Guillermo Rauch (@guille) for the work they did, as well as the stewards of all the other open-source modules we use.  Sails could never have been developed without your tremendous contributions to the node community.\n\n\nThe MIT License (MIT)\n--\n\nCopyright Â© 2012-2013 Mike McNeil\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the âSoftwareâ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED âAS ISâ, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/8acf2fc2ca0aca8a3018e355ad776ed7 \"githalytics.com\")](http://githalytics.com/balderdashy/sails)\n",
  "readmeFilename": "README.md",
  "_id": "sails@0.8.89-1",
  "dist": {
    "shasum": "230287d0873e9f9f33f34a33fc6ea12e80f2311b"
  },
  "_from": "sails@0.8.89-1",
  "_resolved": "https://registry.npmjs.org/sails/-/sails-0.8.89-1.tgz"
}
