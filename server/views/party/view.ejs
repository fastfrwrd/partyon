<article class="queue" id="party_<%= party.id %>" data-partyon-partyid="<%= party.id %>" data-partyon-userid="<%= user.id %>">
	<h3 class="title"><%= party.name %>
		<small class="details"><%= party.track_count %> tracks &bull; <%=: party.user_count %> guests</small>
	</h3>
	<form class="search">
		<input type="text" class="sp-search input-xlarge" autocorrect="off" autocapitalize="off">
	</form>
	<ul id="queue-list" class="list"></ul>
</article>

<script type="text/javascript">
(function($) {

	var app = {},
		partyId = $("article.queue").attr('data-partyon-partyid'),
		userId = $("article.queue").attr('data-partyon-userid');

	Mast.registerModel('Track', {
		url : function() {
			return '/track'
		},
		defaults: {
			title: "",
			userId: 0,
			trackUri: "",
			artists: "",
			votes: 0,
			partyId: partyId,
			played: false,
			users : function() {
				return this.get('userId').split(',');
			}
		}
	});

	Mast.registerCollection('PartyTracks', {
		url : '/track',
		model : 'Track',
		autoFetch: false,
		comparator: function(track) {
			return -track.get('votes');
		},

		events : {
			'click .vote' : 'vote'
		},

		vote : function(ev) {
			ev.preventDefault();
			// voting
		}
	});

	Mast.registerTree("PartyTracksList", {
		outlet : '#queue-list',
	   	template : '.queue-list',
	    collection : "PartyTracks",
	    branchComponent : "TrackListItem",
		emptyHTML: "<li>No tracks yet for this party.</li>",
		loadingHTML: "<li>Loading...</li>",
		errorHTML: "<li>There was an error retrieving tracks. Bummer, dude.</li>",

	    init: function() {
	    	this.fetchCollection({ 
	    		partyId : partyId,
	    		played : false 
	    	});
	    },

		subscriptions: {
			'~track/create': function (track) {
				if (track.partyId != partyId) return;
    			this.collection.add(track);
			},
			'~track/:id/update': function (id, attributes) {
				var track = this.collection.get(id);
				if (track.get('partyId') != this.partyId) return;

				track.set(attributes);
				this.collection.sort();
				this.render();
			}
		}
	});

	Mast.registerComponent('TrackListItem', {
		template : '.party-track'
	});

	Mast.registerComponent('Party', {
		outlet: '.container',
		template: '.queue',
		regions: {
			'#queue-list': 'PartyTracksList'
		},
		subscriptions: {
			'~party/:id/update': function (id, attributes) {
				console.log('update');
				console.log(arguments);
			}
		}
	})

	Mast.routes.index = function(query,page) {
	    app.party = new Mast.components.Party();
	}

	Mast.raise({
		baseurl : "http://partyonwayne.co"
	});

	$(function() {
		// put search-result into the template library
		Mast.TemplateLibrary['.search-result'] = $('.search-result').outerHTML().replace('%7B%7B', '{{').replace('%7D%7D', '}}');;

		// autocomplete setup
		$('.sp-search')
			.autocomplete({
				source: function(req, res) {
					$.getJSON("/track/suggest?q=" + req.term, function(data) {
						res(_.map(_.first(data.tracks, 5), function(track) { return track; }));
					});
				},
				select: function(ev, ui) {
					var model = new Mast.models.Track({
						trackUri : ui.item.href,
						title : ui.item.name,
						artist : _.pluck(ui.item.artists, 'name').join(', '),
						partyId : partyId,
						votes : 1,
						userId : userId
					});
					model.url = function() { return "/track" };
					model.save();
				}
			}).data( "ui-autocomplete" )._renderItem = function( ul, item ) {
				return $('<li />')
					.append(_.template(Mast.TemplateLibrary['.search-result'], item))
					.appendTo(ul);
			};
	});
})($);
</script>